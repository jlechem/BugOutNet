@model  BugOutNetLibrary.Models.ViewModels.UserEditViewModel

@{
    ViewBag.Title = "Profile";
}

<div class="panel-group">
    <div class="panel panel-default">
        <div class="panel-heading">
            <h4 class="panel-title">Profile</h4>
        </div>
        <div class="panel-body">
            <span style="font-family: inherit; color: red;">
                @Html.ValidationSummary()
            </span>
            @using(Html.BeginForm("Edit","Profile", FormMethod.Post, new { enctype = "multipart/form-data" } ) )
            {
            <fieldset>
                @Html.HiddenFor(model => model.Id)
                @Html.HiddenFor(model => model.UserName)
                @Html.AntiForgeryToken()
                <div class="form-group row">
                    <label class="col-xs-2 col-form-label">User Name:</label>
                    <div class="col-xs-10">
                        @Html.TextBoxFor( model => model.UserName, new { @class = "form-control", @readonly = "true" } )
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-xs-2 col-form-label">First Name:</label>
                    <div class="col-xs-10">
                        @Html.TextBoxFor( model => model.FirstName, new { @class = "form-control", placeholder = "First Name", required = "required", autofocus = "true", maxlength = "150" } )
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-xs-2 col-form-label">Last Name:</label>
                    <div class="col-xs-10">
                        @Html.TextBoxFor( model => model.LastName, new { @class = "form-control", placeholder = "Last Name", required = "required", autofocus = "true", maxlength = "150" } )
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-xs-2 col-form-label">Password:</label>
                    <div class="col-xs-10">
                        @Html.PasswordFor( model => model.Password, new { @class = "form-control", placeholder = "Password", maxlength = "50" } )
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-xs-2 col-form-label">Confirm Password:</label>
                    <div class="col-xs-10">
                        @Html.PasswordFor( model => model.ConfirmPassword, new { @class = "form-control", placeholder = "Confirm Password", maxlength = "50" } )
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-xs-2 col-form-label">Email Address:</label>
                    <div class="col-xs-10">
                        @Html.TextBoxFor( model => model.EmailAddress, new { @class = "form-control", placeholder = "Email Address", required = "required", maxlength = "50", type = "email" } )
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-xs-2 col-form-label">Address 1:</label>
                    <div class="col-xs-10">
                        @Html.TextBoxFor( model => model.Address1, new { @class = "form-control", placeholder = "Address", maxlength = "150" } )
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-xs-2 col-form-label">Address 2:</label>
                    <div class="col-xs-10">
                        @Html.TextBoxFor( model => model.Address2, new { @class = "form-control", placeholder = "Address 2",  maxlength = "150" } )
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-xs-2 col-form-label">
                        Avatar: 
                        @{
                            if( Model.Avatar != null )
                            {
                                var base64 = Convert.ToBase64String( Model.Avatar );
                                var imgSrc = String.Format( "data:image/gif;base64,{0}", base64 );
                                <img src="@imgSrc" style="width: 25px; height: 25px;" />
                            }
                        }
                    </label>
                    <div class="col-xs-10">
                        @Html.TextBoxFor( model => model.NewAvatar, new { type = "file", @class = "form-control", accept = ".jpg,.jpeg,.gif,.png,.ico" } )
                    </div>
                </div>
                    <div style="padding-top: 10px;">
                    <button type="submit" class="btn btn-primary" value="buttonSave" id="buttonSave">Save</button>
                </div>
                <div style="padding-top: 10px;">
                    <label>
                        @Html.Raw(Model.SaveResult)
                    </label>
                </div>
            </fieldset>
            }
        </div>
    </div>
</div>
<script>
  function handleFileSelect(evt) {
    if (window.File && window.FileReader )
    {
        var file = event.target.files[0];
        var reader = new FileReader();
        reader.onload = function (event) {
            var image = new Image();
            image.src = event.target.result;

            image.onload = function () {
                // access image size here 
                console.log(this.width);
            };

        };

        reader.readAsBinaryString(file);

    }

    // files is a FileList of File objects. List some properties.
  //  var output = [];
  //  for (var i = 0, f; f = files[i]; i++) {
  //    output.push('<li><strong>', escape(f.name), '</strong> (', f.type || 'n/a', ') - ',
  //                f.size, ' bytes, last modified: ',
  //                f.lastModifiedDate ? f.lastModifiedDate.toLocaleDateString() : 'n/a',
  //                '</li>');
  //  }
  //  document.getElementById('list').innerHTML = '<ul>' + output.join('') + '</ul>';
  }
    //document.getElementById('NewAvatar').addEventListener('change', handleFileSelect, false);
</script>